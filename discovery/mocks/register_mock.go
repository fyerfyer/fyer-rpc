// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	naming "github.com/fyerfyer/fyer-rpc/naming"
	mock "github.com/stretchr/testify/mock"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

type Registry_Expecter struct {
	mock *mock.Mock
}

func (_m *Registry) EXPECT() *Registry_Expecter {
	return &Registry_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Registry) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Registry_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Registry_Expecter) Close() *Registry_Close_Call {
	return &Registry_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Registry_Close_Call) Run(run func()) *Registry_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Registry_Close_Call) Return(_a0 error) *Registry_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Close_Call) RunAndReturn(run func() error) *Registry_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Deregister provides a mock function with given fields: ctx, service
func (_m *Registry) Deregister(ctx context.Context, service *naming.Instance) error {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for Deregister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *naming.Instance) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Deregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deregister'
type Registry_Deregister_Call struct {
	*mock.Call
}

// Deregister is a helper method to define mock.On call
//   - ctx context.Context
//   - service *naming.Instance
func (_e *Registry_Expecter) Deregister(ctx interface{}, service interface{}) *Registry_Deregister_Call {
	return &Registry_Deregister_Call{Call: _e.mock.On("Deregister", ctx, service)}
}

func (_c *Registry_Deregister_Call) Run(run func(ctx context.Context, service *naming.Instance)) *Registry_Deregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*naming.Instance))
	})
	return _c
}

func (_c *Registry_Deregister_Call) Return(_a0 error) *Registry_Deregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Deregister_Call) RunAndReturn(run func(context.Context, *naming.Instance) error) *Registry_Deregister_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: ctx, service
func (_m *Registry) UpdateService(ctx context.Context, service *naming.Instance) error {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *naming.Instance) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Heartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type Registry_Heartbeat_Call struct {
	*mock.Call
}

// Heartbeat is a helper method to define mock.On call
//   - ctx context.Context
//   - service *naming.Instance
func (_e *Registry_Expecter) Heartbeat(ctx interface{}, service interface{}) *Registry_Heartbeat_Call {
	return &Registry_Heartbeat_Call{Call: _e.mock.On("UpdateService", ctx, service)}
}

func (_c *Registry_Heartbeat_Call) Run(run func(ctx context.Context, service *naming.Instance)) *Registry_Heartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*naming.Instance))
	})
	return _c
}

func (_c *Registry_Heartbeat_Call) Return(_a0 error) *Registry_Heartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Heartbeat_Call) RunAndReturn(run func(context.Context, *naming.Instance) error) *Registry_Heartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function with given fields: ctx, service, version
func (_m *Registry) ListServices(ctx context.Context, service string, version string) ([]*naming.Instance, error) {
	ret := _m.Called(ctx, service, version)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 []*naming.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*naming.Instance, error)); ok {
		return rf(ctx, service, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*naming.Instance); ok {
		r0 = rf(ctx, service, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*naming.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, service, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registry_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type Registry_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
//   - version string
func (_e *Registry_Expecter) ListServices(ctx interface{}, service interface{}, version interface{}) *Registry_ListServices_Call {
	return &Registry_ListServices_Call{Call: _e.mock.On("ListServices", ctx, service, version)}
}

func (_c *Registry_ListServices_Call) Run(run func(ctx context.Context, service string, version string)) *Registry_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Registry_ListServices_Call) Return(_a0 []*naming.Instance, _a1 error) *Registry_ListServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Registry_ListServices_Call) RunAndReturn(run func(context.Context, string, string) ([]*naming.Instance, error)) *Registry_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, service
func (_m *Registry) Register(ctx context.Context, service *naming.Instance) error {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *naming.Instance) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Registry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - service *naming.Instance
func (_e *Registry_Expecter) Register(ctx interface{}, service interface{}) *Registry_Register_Call {
	return &Registry_Register_Call{Call: _e.mock.On("Register", ctx, service)}
}

func (_c *Registry_Register_Call) Run(run func(ctx context.Context, service *naming.Instance)) *Registry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*naming.Instance))
	})
	return _c
}

func (_c *Registry_Register_Call) Return(_a0 error) *Registry_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Register_Call) RunAndReturn(run func(context.Context, *naming.Instance) error) *Registry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, service, version
func (_m *Registry) Subscribe(ctx context.Context, service string, version string) (<-chan []*naming.Instance, error) {
	ret := _m.Called(ctx, service, version)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan []*naming.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (<-chan []*naming.Instance, error)); ok {
		return rf(ctx, service, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan []*naming.Instance); ok {
		r0 = rf(ctx, service, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []*naming.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, service, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registry_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Registry_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
//   - version string
func (_e *Registry_Expecter) Subscribe(ctx interface{}, service interface{}, version interface{}) *Registry_Subscribe_Call {
	return &Registry_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, service, version)}
}

func (_c *Registry_Subscribe_Call) Run(run func(ctx context.Context, service string, version string)) *Registry_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Registry_Subscribe_Call) Return(_a0 <-chan []*naming.Instance, _a1 error) *Registry_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Registry_Subscribe_Call) RunAndReturn(run func(context.Context, string, string) (<-chan []*naming.Instance, error)) *Registry_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: ctx, service, version
func (_m *Registry) Unsubscribe(ctx context.Context, service string, version string) error {
	ret := _m.Called(ctx, service, version)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, service, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Registry_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type Registry_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
//   - version string
func (_e *Registry_Expecter) Unsubscribe(ctx interface{}, service interface{}, version interface{}) *Registry_Unsubscribe_Call {
	return &Registry_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", ctx, service, version)}
}

func (_c *Registry_Unsubscribe_Call) Run(run func(ctx context.Context, service string, version string)) *Registry_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Registry_Unsubscribe_Call) Return(_a0 error) *Registry_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Registry_Unsubscribe_Call) RunAndReturn(run func(context.Context, string, string) error) *Registry_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegistry creates a new instance of Registry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *Registry {
	mock := &Registry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
