// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	metrics "github.com/fyerfyer/fyer-rpc/discovery/metrics"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

type Metrics_Expecter struct {
	mock *mock.Mock
}

func (_m *Metrics) EXPECT() *Metrics_Expecter {
	return &Metrics_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Metrics) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Metrics_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Metrics_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Metrics_Expecter) Close() *Metrics_Close_Call {
	return &Metrics_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Metrics_Close_Call) Run(run func()) *Metrics_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Metrics_Close_Call) Return(_a0 error) *Metrics_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_Close_Call) RunAndReturn(run func() error) *Metrics_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetFailoverRate provides a mock function with given fields: ctx, service
func (_m *Metrics) GetFailoverRate(ctx context.Context, service string) (float64, error) {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for GetFailoverRate")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, service)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metrics_GetFailoverRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFailoverRate'
type Metrics_GetFailoverRate_Call struct {
	*mock.Call
}

// GetFailoverRate is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
func (_e *Metrics_Expecter) GetFailoverRate(ctx interface{}, service interface{}) *Metrics_GetFailoverRate_Call {
	return &Metrics_GetFailoverRate_Call{Call: _e.mock.On("GetFailoverRate", ctx, service)}
}

func (_c *Metrics_GetFailoverRate_Call) Run(run func(ctx context.Context, service string)) *Metrics_GetFailoverRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Metrics_GetFailoverRate_Call) Return(_a0 float64, _a1 error) *Metrics_GetFailoverRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Metrics_GetFailoverRate_Call) RunAndReturn(run func(context.Context, string) (float64, error)) *Metrics_GetFailoverRate_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatency provides a mock function with given fields: ctx, service, instance
func (_m *Metrics) GetLatency(ctx context.Context, service string, instance string) (time.Duration, error) {
	ret := _m.Called(ctx, service, instance)

	if len(ret) == 0 {
		panic("no return value specified for GetLatency")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (time.Duration, error)); ok {
		return rf(ctx, service, instance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) time.Duration); ok {
		r0 = rf(ctx, service, instance)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, service, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metrics_GetLatency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatency'
type Metrics_GetLatency_Call struct {
	*mock.Call
}

// GetLatency is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
//   - instance string
func (_e *Metrics_Expecter) GetLatency(ctx interface{}, service interface{}, instance interface{}) *Metrics_GetLatency_Call {
	return &Metrics_GetLatency_Call{Call: _e.mock.On("GetLatency", ctx, service, instance)}
}

func (_c *Metrics_GetLatency_Call) Run(run func(ctx context.Context, service string, instance string)) *Metrics_GetLatency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Metrics_GetLatency_Call) Return(_a0 time.Duration, _a1 error) *Metrics_GetLatency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Metrics_GetLatency_Call) RunAndReturn(run func(context.Context, string, string) (time.Duration, error)) *Metrics_GetLatency_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLatency provides a mock function with given fields: ctx, service
func (_m *Metrics) GetServiceLatency(ctx context.Context, service string) (map[string]time.Duration, error) {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceLatency")
	}

	var r0 map[string]time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]time.Duration, error)); ok {
		return rf(ctx, service)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]time.Duration); ok {
		r0 = rf(ctx, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]time.Duration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metrics_GetServiceLatency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLatency'
type Metrics_GetServiceLatency_Call struct {
	*mock.Call
}

// GetServiceLatency is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
func (_e *Metrics_Expecter) GetServiceLatency(ctx interface{}, service interface{}) *Metrics_GetServiceLatency_Call {
	return &Metrics_GetServiceLatency_Call{Call: _e.mock.On("GetServiceLatency", ctx, service)}
}

func (_c *Metrics_GetServiceLatency_Call) Run(run func(ctx context.Context, service string)) *Metrics_GetServiceLatency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Metrics_GetServiceLatency_Call) Return(_a0 map[string]time.Duration, _a1 error) *Metrics_GetServiceLatency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Metrics_GetServiceLatency_Call) RunAndReturn(run func(context.Context, string) (map[string]time.Duration, error)) *Metrics_GetServiceLatency_Call {
	_c.Call.Return(run)
	return _c
}

// RecordCircuitBreak provides a mock function with given fields: ctx, service, instance, state
func (_m *Metrics) RecordCircuitBreak(ctx context.Context, service string, instance string, state string) error {
	ret := _m.Called(ctx, service, instance, state)

	if len(ret) == 0 {
		panic("no return value specified for RecordCircuitBreak")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, service, instance, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Metrics_RecordCircuitBreak_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordCircuitBreak'
type Metrics_RecordCircuitBreak_Call struct {
	*mock.Call
}

// RecordCircuitBreak is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
//   - instance string
//   - state string
func (_e *Metrics_Expecter) RecordCircuitBreak(ctx interface{}, service interface{}, instance interface{}, state interface{}) *Metrics_RecordCircuitBreak_Call {
	return &Metrics_RecordCircuitBreak_Call{Call: _e.mock.On("RecordCircuitBreak", ctx, service, instance, state)}
}

func (_c *Metrics_RecordCircuitBreak_Call) Run(run func(ctx context.Context, service string, instance string, state string)) *Metrics_RecordCircuitBreak_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Metrics_RecordCircuitBreak_Call) Return(_a0 error) *Metrics_RecordCircuitBreak_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_RecordCircuitBreak_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Metrics_RecordCircuitBreak_Call {
	_c.Call.Return(run)
	return _c
}

// RecordFailover provides a mock function with given fields: ctx, service, fromInstance, toInstance
func (_m *Metrics) RecordFailover(ctx context.Context, service string, fromInstance string, toInstance string) error {
	ret := _m.Called(ctx, service, fromInstance, toInstance)

	if len(ret) == 0 {
		panic("no return value specified for RecordFailover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, service, fromInstance, toInstance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Metrics_RecordFailover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordFailover'
type Metrics_RecordFailover_Call struct {
	*mock.Call
}

// RecordFailover is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
//   - fromInstance string
//   - toInstance string
func (_e *Metrics_Expecter) RecordFailover(ctx interface{}, service interface{}, fromInstance interface{}, toInstance interface{}) *Metrics_RecordFailover_Call {
	return &Metrics_RecordFailover_Call{Call: _e.mock.On("RecordFailover", ctx, service, fromInstance, toInstance)}
}

func (_c *Metrics_RecordFailover_Call) Run(run func(ctx context.Context, service string, fromInstance string, toInstance string)) *Metrics_RecordFailover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Metrics_RecordFailover_Call) Return(_a0 error) *Metrics_RecordFailover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_RecordFailover_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Metrics_RecordFailover_Call {
	_c.Call.Return(run)
	return _c
}

// RecordResponse provides a mock function with given fields: ctx, metric
func (_m *Metrics) RecordResponse(ctx context.Context, metric *metrics.ResponseMetric) error {
	ret := _m.Called(ctx, metric)

	if len(ret) == 0 {
		panic("no return value specified for RecordResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metrics.ResponseMetric) error); ok {
		r0 = rf(ctx, metric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Metrics_RecordResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordResponse'
type Metrics_RecordResponse_Call struct {
	*mock.Call
}

// RecordResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - metric *metrics.ResponseMetric
func (_e *Metrics_Expecter) RecordResponse(ctx interface{}, metric interface{}) *Metrics_RecordResponse_Call {
	return &Metrics_RecordResponse_Call{Call: _e.mock.On("RecordResponse", ctx, metric)}
}

func (_c *Metrics_RecordResponse_Call) Run(run func(ctx context.Context, metric *metrics.ResponseMetric)) *Metrics_RecordResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metrics.ResponseMetric))
	})
	return _c
}

func (_c *Metrics_RecordResponse_Call) Return(_a0 error) *Metrics_RecordResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_RecordResponse_Call) RunAndReturn(run func(context.Context, *metrics.ResponseMetric) error) *Metrics_RecordResponse_Call {
	_c.Call.Return(run)
	return _c
}

// RecordRetry provides a mock function with given fields: ctx, service, instance, attempt
func (_m *Metrics) RecordRetry(ctx context.Context, service string, instance string, attempt int) error {
	ret := _m.Called(ctx, service, instance, attempt)

	if len(ret) == 0 {
		panic("no return value specified for RecordRetry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, service, instance, attempt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Metrics_RecordRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordRetry'
type Metrics_RecordRetry_Call struct {
	*mock.Call
}

// RecordRetry is a helper method to define mock.On call
//   - ctx context.Context
//   - service string
//   - instance string
//   - attempt int
func (_e *Metrics_Expecter) RecordRetry(ctx interface{}, service interface{}, instance interface{}, attempt interface{}) *Metrics_RecordRetry_Call {
	return &Metrics_RecordRetry_Call{Call: _e.mock.On("RecordRetry", ctx, service, instance, attempt)}
}

func (_c *Metrics_RecordRetry_Call) Run(run func(ctx context.Context, service string, instance string, attempt int)) *Metrics_RecordRetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *Metrics_RecordRetry_Call) Return(_a0 error) *Metrics_RecordRetry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Metrics_RecordRetry_Call) RunAndReturn(run func(context.Context, string, string, int) error) *Metrics_RecordRetry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
